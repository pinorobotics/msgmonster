plugins {
  id 'com.diffplug.spotless'
  id 'jacoco'
}

eclipse.classpath.file {
  // instruct eclipse plugin to put everything to module path
  whenMerged {
    entries.findAll { it.kind == 'lib' }.each { it.entryAttributes['module'] = 'true' }
  }
}

dependencies {
  implementation project(':msgmonster')
  testImplementation 'io.github.lambdaprime:id.xfunctiontests:1.0'
  implementation 'io.github.lambdaprime:id.xfunction:25.0'

  def junitVersion = "5.8.1"
  testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
  testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
  testRuntimeOnly "org.junit.platform:junit-platform-commons:1.7.0"
}

jacoco {
  toolVersion = "0.8.12"
}

String testDir = "$buildDir/${projectName}"
String testSrcDir = "$projectDir/src/test"

// Gradle has no UnZip task so we reuse Copy for that
task myTestCopy(type: Copy) {
    mkdir file(testDir)
    from zipTree("${project.rootDir}/${projectName}/release/${releaseFileName}")
    into "$buildDir"
}

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport, jacocoTestCoverageVerification

  testLogging {
    events "started", "failed"
  }
}

myTestCopy.dependsOn project(':msgmonster').createRelease
compileTestJava.dependsOn myTestCopy
jar.dependsOn myTestCopy

jacocoTestReport {
  // generate only HTML report
  reports {
    xml.required = false
    csv.required = false
    html.required = true
  }
  sourceDirectories.from = project(':msgmonster').sourceSets.main.java.srcDirs
  classDirectories.from = project(':msgmonster').sourceSets.main.java.classesDirectory
}

jacocoTestCoverageVerification {
  sourceDirectories.from = project(':msgmonster').sourceSets.main.java.srcDirs
  classDirectories.from = project(':msgmonster').sourceSets.main.java.classesDirectory
  violationRules {
    rule {
      enabled = true
      element = 'PACKAGE'
      excludes = [
        'pinorobotics.msgmonster.app',
        'pinorobotics.msgmonster.ros'
      ]
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 0.5
      }
    }
    rule {
      enabled = true
      element = 'PACKAGE'
      includes = ['pinorobotics.msgmonster.app']
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 0.0
      }
    }
  }
}

// run spotless and format code before the build
testClasses.dependsOn spotlessApply
